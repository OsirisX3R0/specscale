{"version":3,"sources":["components/Header.js","components/Compare.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","color","className","dark","Container","NavbarBrand","href","Compare","useState","selector1","setSelector1","selector2","setSelector2","spec1","setSpec1","spec2","setSpec2","comparison","setComparison","error","setError","handleSelectorChange","e","target","id","value","Alert","Row","Col","xs","sm","FormGroup","Label","for","Input","bsSize","onChange","Button","onClick","compare","calculate","specificity","block","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fc0d784.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, NavbarBrand, Container } from 'reactstrap';\r\n\r\nconst Header = () => {    \r\n    return(\r\n        <Navbar color=\"success\" className=\"mb-4\" dark>\r\n            <Container>\r\n                <NavbarBrand href=\"/\">SpecScale</NavbarBrand>\r\n                <div className=\"text-right text-light\">Get your styles right!</div>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Fragment, useState } from 'react';\r\nimport { Row, Col, FormGroup, Label, Input, Button, Alert } from 'reactstrap';\r\nimport { compare, calculate } from 'specificity';\r\n\r\nconst Compare = () => {\r\n    const [selector1, setSelector1] = useState('');\r\n    const [selector2, setSelector2] = useState('');\r\n    const [spec1, setSpec1] = useState('');\r\n    const [spec2, setSpec2] = useState('');\r\n    const [comparison, setComparison] = useState(null);\r\n    const [error, setError] = useState(null)\r\n\r\n    function handleSelectorChange (e) {\r\n        if (e.target.id === 'selector1')\r\n            setSelector1(e.target.value)\r\n        else if (e.target.id === 'selector2')\r\n            setSelector2(e.target.value)\r\n    }\r\n\r\n    function compareSelectors () {\r\n        if (selector1 === '' || selector2 === '') {\r\n            setError('Please enter two selectors.')\r\n            return;\r\n        }\r\n        setError(null);\r\n        setComparison(compare(selector1, selector2));\r\n        setSpec1(calculate(selector1)[0].specificity);//Array.join(\"\");\r\n        setSpec2(calculate(selector2)[0].specificity);//Array.join(\"\");\r\n    }\r\n\r\n    function reset () {\r\n        setSelector1('')\r\n        setSelector2('')\r\n        setComparison(null)\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            {!comparison &&\r\n                <Fragment>\r\n                    <h5 className='text-secondary'>Pit two CSS selectors head to head to see which one is more specific</h5>\r\n                    {error && <Alert color=\"danger\">{error}</Alert>}\r\n                    <Row>\r\n                        <Col xs=\"12\" sm=\"6\">\r\n                            <FormGroup>\r\n                                <Label for=\"selector1\">Selector #1</Label>\r\n                                <Input bsSize=\"lg\" id=\"selector1\" value={selector1} onChange={handleSelectorChange} />                        \r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col xs=\"12\" sm=\"6\">\r\n                            <FormGroup>\r\n                                <Label for=\"selector2\">Selector #2</Label>\r\n                                <Input bsSize=\"lg\" id=\"selector2\" value={selector2} onChange={handleSelectorChange} />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Button color=\"info\" onClick={compareSelectors}>Compare!</Button>\r\n                </Fragment>\r\n            }\r\n\r\n            {comparison && \r\n                <Fragment>\r\n                    <Row className='my-3'>\r\n                        <Col xs=\"6\">\r\n                            <div className=\"text-center display-4\">\r\n                                <h5>{selector1}</h5>\r\n                                <div className={\r\n                                    comparison > 0 \r\n                                        ? \"text-success\" \r\n                                        : comparison === 0 \r\n                                            ? \"text-secondary\"\r\n                                            : \"text-danger\"\r\n                                    }>{spec1}</div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs=\"6\">\r\n                            <div className=\"text-center display-4\">\r\n                                <h5>{selector2}</h5>\r\n                                <div className={\r\n                                    comparison < 0 \r\n                                        ? \"text-success\" \r\n                                        : comparison === 0 \r\n                                            ? \"text-secondary\"\r\n                                            : \"text-danger\"\r\n                                    }>{spec2}</div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Button color=\"info\" onClick={reset} block>Compare some more!</Button>\r\n                </Fragment>\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Compare;","import React from 'react';\r\nimport { Container } from 'reactstrap';\r\n\r\nconst Footer = () => {    \r\n    return(\r\n        <footer className=\"page-footer bg-primary text-light py-3 mt-3\">\r\n            <Container>\r\n                <div>Created by Richard Harris</div>\r\n            </Container>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, {Fragment} from 'react';\nimport Header from './components/Header';\nimport Compare from './components/Compare';\nimport Footer from './components/Footer';\nimport { Container } from 'reactstrap';\nimport 'bootswatch/dist/solar/bootstrap.css';\nimport './App.css';\n\nfunction App() {\n  return (\n      <Fragment>\n        <Header />\n        <Container>\n          <Compare />\n        </Container>\n        <Footer />\n      </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}